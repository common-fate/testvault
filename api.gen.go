// Package testvault provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.1 DO NOT EDIT.
package testvault

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// MembershipResponse defines model for MembershipResponse.
type MembershipResponse struct {
	// A diagnostic message about the vault membership.
	Message string `json:"message"`
}

// AddMember defines model for AddMember.
type AddMember struct {
	// The user ID or email to add to the vault. This can be any string.
	User string `json:"user"`
}

// AddMemberToVaultJSONRequestBody defines body for AddMemberToVault for application/json ContentType.
type AddMemberToVaultJSONRequestBody AddMember

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AddMemberToVault request with any body
	AddMemberToVaultWithBody(ctx context.Context, vaultId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddMemberToVault(ctx context.Context, vaultId string, body AddMemberToVaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckVaultMembership request
	CheckVaultMembership(ctx context.Context, vaultId string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMemberFromVault request
	RemoveMemberFromVault(ctx context.Context, vaultId string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AddMemberToVaultWithBody(ctx context.Context, vaultId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMemberToVaultRequestWithBody(c.Server, vaultId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMemberToVault(ctx context.Context, vaultId string, body AddMemberToVaultJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMemberToVaultRequest(c.Server, vaultId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckVaultMembership(ctx context.Context, vaultId string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckVaultMembershipRequest(c.Server, vaultId, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMemberFromVault(ctx context.Context, vaultId string, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMemberFromVaultRequest(c.Server, vaultId, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAddMemberToVaultRequest calls the generic AddMemberToVault builder with application/json body
func NewAddMemberToVaultRequest(server string, vaultId string, body AddMemberToVaultJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMemberToVaultRequestWithBody(server, vaultId, "application/json", bodyReader)
}

// NewAddMemberToVaultRequestWithBody generates requests for AddMemberToVault with any type of body
func NewAddMemberToVaultRequestWithBody(server string, vaultId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaultId", runtime.ParamLocationPath, vaultId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vaults/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckVaultMembershipRequest generates requests for CheckVaultMembership
func NewCheckVaultMembershipRequest(server string, vaultId string, memberId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaultId", runtime.ParamLocationPath, vaultId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "memberId", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vaults/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveMemberFromVaultRequest generates requests for RemoveMemberFromVault
func NewRemoveMemberFromVaultRequest(server string, vaultId string, memberId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "vaultId", runtime.ParamLocationPath, vaultId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "memberId", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/vaults/%s/members/%s/remove", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AddMemberToVault request with any body
	AddMemberToVaultWithBodyWithResponse(ctx context.Context, vaultId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMemberToVaultResponse, error)

	AddMemberToVaultWithResponse(ctx context.Context, vaultId string, body AddMemberToVaultJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMemberToVaultResponse, error)

	// CheckVaultMembership request
	CheckVaultMembershipWithResponse(ctx context.Context, vaultId string, memberId string, reqEditors ...RequestEditorFn) (*CheckVaultMembershipResponse, error)

	// RemoveMemberFromVault request
	RemoveMemberFromVaultWithResponse(ctx context.Context, vaultId string, memberId string, reqEditors ...RequestEditorFn) (*RemoveMemberFromVaultResponse, error)
}

type AddMemberToVaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddMemberToVaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMemberToVaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckVaultMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// A diagnostic message about the vault membership.
		Message string `json:"message"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r CheckVaultMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckVaultMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMemberFromVaultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r RemoveMemberFromVaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMemberFromVaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AddMemberToVaultWithBodyWithResponse request with arbitrary body returning *AddMemberToVaultResponse
func (c *ClientWithResponses) AddMemberToVaultWithBodyWithResponse(ctx context.Context, vaultId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMemberToVaultResponse, error) {
	rsp, err := c.AddMemberToVaultWithBody(ctx, vaultId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMemberToVaultResponse(rsp)
}

func (c *ClientWithResponses) AddMemberToVaultWithResponse(ctx context.Context, vaultId string, body AddMemberToVaultJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMemberToVaultResponse, error) {
	rsp, err := c.AddMemberToVault(ctx, vaultId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMemberToVaultResponse(rsp)
}

// CheckVaultMembershipWithResponse request returning *CheckVaultMembershipResponse
func (c *ClientWithResponses) CheckVaultMembershipWithResponse(ctx context.Context, vaultId string, memberId string, reqEditors ...RequestEditorFn) (*CheckVaultMembershipResponse, error) {
	rsp, err := c.CheckVaultMembership(ctx, vaultId, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckVaultMembershipResponse(rsp)
}

// RemoveMemberFromVaultWithResponse request returning *RemoveMemberFromVaultResponse
func (c *ClientWithResponses) RemoveMemberFromVaultWithResponse(ctx context.Context, vaultId string, memberId string, reqEditors ...RequestEditorFn) (*RemoveMemberFromVaultResponse, error) {
	rsp, err := c.RemoveMemberFromVault(ctx, vaultId, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMemberFromVaultResponse(rsp)
}

// ParseAddMemberToVaultResponse parses an HTTP response from a AddMemberToVaultWithResponse call
func ParseAddMemberToVaultResponse(rsp *http.Response) (*AddMemberToVaultResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddMemberToVaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCheckVaultMembershipResponse parses an HTTP response from a CheckVaultMembershipWithResponse call
func ParseCheckVaultMembershipResponse(rsp *http.Response) (*CheckVaultMembershipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckVaultMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// A diagnostic message about the vault membership.
			Message string `json:"message"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRemoveMemberFromVaultResponse parses an HTTP response from a RemoveMemberFromVaultWithResponse call
func ParseRemoveMemberFromVaultResponse(rsp *http.Response) (*RemoveMemberFromVaultResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMemberFromVaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add member to vault
	// (POST /vaults/{vaultId}/members)
	AddMemberToVault(w http.ResponseWriter, r *http.Request, vaultId string)
	// Check vault membership
	// (GET /vaults/{vaultId}/members/{memberId})
	CheckVaultMembership(w http.ResponseWriter, r *http.Request, vaultId string, memberId string)
	// Remove a member from a vault
	// (POST /vaults/{vaultId}/members/{memberId}/remove)
	RemoveMemberFromVault(w http.ResponseWriter, r *http.Request, vaultId string, memberId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// AddMemberToVault operation middleware
func (siw *ServerInterfaceWrapper) AddMemberToVault(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "vaultId" -------------
	var vaultId string

	err = runtime.BindStyledParameter("simple", false, "vaultId", chi.URLParam(r, "vaultId"), &vaultId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vaultId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddMemberToVault(w, r, vaultId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// CheckVaultMembership operation middleware
func (siw *ServerInterfaceWrapper) CheckVaultMembership(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "vaultId" -------------
	var vaultId string

	err = runtime.BindStyledParameter("simple", false, "vaultId", chi.URLParam(r, "vaultId"), &vaultId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vaultId", Err: err})
		return
	}

	// ------------- Path parameter "memberId" -------------
	var memberId string

	err = runtime.BindStyledParameter("simple", false, "memberId", chi.URLParam(r, "memberId"), &memberId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "memberId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckVaultMembership(w, r, vaultId, memberId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// RemoveMemberFromVault operation middleware
func (siw *ServerInterfaceWrapper) RemoveMemberFromVault(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "vaultId" -------------
	var vaultId string

	err = runtime.BindStyledParameter("simple", false, "vaultId", chi.URLParam(r, "vaultId"), &vaultId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vaultId", Err: err})
		return
	}

	// ------------- Path parameter "memberId" -------------
	var memberId string

	err = runtime.BindStyledParameter("simple", false, "memberId", chi.URLParam(r, "memberId"), &memberId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "memberId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveMemberFromVault(w, r, vaultId, memberId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/vaults/{vaultId}/members", wrapper.AddMemberToVault)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/vaults/{vaultId}/members/{memberId}", wrapper.CheckVaultMembership)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/vaults/{vaultId}/members/{memberId}/remove", wrapper.RemoveMemberFromVault)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWUW/cNgz+K4QyIC+ufe0yoLi3rF23w1AkSA7rQxOgikWfldiiJ8qXHYL774NoO87d",
	"uWuKpU+2ZYrk9/EjpQeVU92QQxdYzR+Ux79b5PArGYuycGrMR6xv0MePnFxAF+KrbprK5jpYctktk4tr",
	"nJdY6/jWeGrQh95Hy912g5x728Q9aq6WJUL8A4v3QB6w1raCQKCNiY9QIqx1W4UUlqVlyLWDGwTtNsDB",
	"W7dKVaLCpkE1V92C2m4TAWA9GjX/3MW9frSim1vMg9pGs91UFq4gXwuYmJIZ0tBQC3b57rPpo3BDjjt4",
	"v3lP/qJf+R80YfQTX/4bVWf2HFinDsQYPIbWOzRQeKqFWUa/tjmmapuorr5c2uYFQNTIrFd4WO5TMFav",
	"HHGwOfRWoG+oDWOpe7pjKt+u7hDpOUxctnmOzEVbwVA6KMgfRO32WlfQQIHOhQKn6xjhHdU1OfigA6pE",
	"tb5Sc1WG0PA8y3L5V+iAqSU1VYzT84VEjXi/BOQg4b/A7167gAbOPa2tQZ9eueWeSdP/AsudQqMfdOZV",
	"oFfoDERT61ZAxeAtvXJX7ugI/hKIi/ccnVqWJFbRhEELKVHcV0ri8JWK3Ybc12Oi60A7A9ojOAqw1pU1",
	"OqauV9o6DqCh8WiwsFFtleWQwqcSHdx7K/ntpcywoVaC9ABBg9fOUB2nwsDVuoewl5vHxiOjC7Gm1Poc",
	"GSp7h3B2FzSsPLUNJ3D66RIuL8/gHH1tmS25SwycwOtzzXxP3vTuEkHGFKOGUkJtBOhtG3E5wH903VT4",
	"GAzuS5uXcI+Sv1A6MirytaGKolkih64MKlFr9NwJ4nU6iyqhBp1urJqrn9NZOlOJanQopZeyLrPsQZ4L",
	"s816pUrbaa9rDPL1+UHZ6DLuVMkg1n6Xeto2wbeYPGne/Ra7TlRDHCbad28c7oznsUTTYzoOCBkfC9O5",
	"6kbOkgZWxmNnE0P/5LFQc3WUjYdTtnMyZeOxtD+N38xmh9mf/Snjg9u61n7TwxnBSPZi8VXKs4fuZWG2",
	"0f0KJzi6kDHLoOGP5fIc3sxm47SxhVAmB57lkUoqnlK55+FkdjLtodQsDXiD2Esv9qCIL4Ul7agxgVxX",
	"lew9jrA/PsIW9o9lIqAzDVkXDqv1rsT8TizHc0JNcz5dtt4umzhmtok6mZ18e+vuCbtbSclvYpAnP6hD",
	"kklPgzi+r9meKbjMY01r/HFd/5KYvjZALgTDE+XLXUR/h/L7ffea3XEAzWxXDvfuigfy7cJ22vvgqR4n",
	"znNmxgvos0tgGnZ33Yh3saGg45VinmUV5boqicP87eztL2p7vf03AAD//6GOeJyvCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
